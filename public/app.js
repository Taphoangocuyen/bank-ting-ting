class BankTingTing {
    constructor() {
        this.socket = null;
        this.isConnected = false;
        this.soundEnabled = true;
        this.ttsEnabled = true;
        this.transactions = [];
        this.totalAmount = 0;
        
        // T·ª´ ƒëi·ªÉn ph√°t √¢m ng√¢n h√†ng
        this.bankPronunciations = {
            'VCB': 'vi·ªát com bƒÉng',
            'Vietcombank': 'vi·ªát com bƒÉng', 
            'VIETCOMBANK': 'vi·ªát com bƒÉng',
            'TCB': 't·∫øch com bƒÉng',
            'Techcombank': 't·∫øch com bƒÉng',
            'TECHCOMBANK': 't·∫øch com bƒÉng',
            'MB': 'm·ªù b√™ bƒÉng',
            'MBBANK': 'm·ªù b√™ bƒÉng',
            'MBBank': 'm·ªù b√™ bƒÉng',
            'ACB': 'ACB',
            'VTB': 'vi·ªát tin bƒÉng',
            'VietinBank': 'vi·ªát tin bƒÉng',
            'VIETINBANK': 'vi·ªát tin bƒÉng',
            'VPBank': 'v√™ p√™ bƒÉng',
            'VPBANK': 'v√™ p√™ bƒÉng',
            'BIDV': 'b√™ i ƒë√™ v√™',
            'SHB': '√©t √°ch b√™',
            'Sacombank': 'sa com bƒÉng',
            'SACOMBANK': 'sa com bƒÉng',
            'HDBank': '√°ch ƒë√™ bƒÉng',
            'HDBANK': '√°ch ƒë√™ bƒÉng',
            'TPBank': 't√™ p√™ bƒÉng',
            'TPBANK': 't√™ p√™ bƒÉng',
            'Eximbank': '·∫øch xim bƒÉng',
            'EXIMBANK': '·∫øch xim bƒÉng',
            'OCB': '√¥ ch√™ bƒÉng',
            'MSB': '·∫øm √©t b√™',
            'SeABank': 's√≠ √¢y bƒÉng',
            'SEABANK': 's√≠ √¢y bƒÉng',
            'LienVietPostBank': 'li√™n vi·ªát p√≥t bƒÉng',
            'LIENVIETPOSTBANK': 'li√™n vi·ªát p√≥t bƒÉng',
            'Agribank': 'a g∆° ri bƒÉng',
            'AGRIBANK': 'a g∆° ri bƒÉng',
            'VIB': 'v√™ i bƒÉng',
            'PVcomBank': 'p√™ v√™ com bƒÉng',
            'PVCOMBANK': 'p√™ v√™ com bƒÉng'
        };
        
        this.init();
    }
    
    init() {
        this.connectSocket();
        this.setupEventListeners();
        this.requestNotificationPermission();
        this.preventSleep();
    }
    
    connectSocket() {
        this.socket = io();
        
        this.socket.on('connect', () => {
            this.isConnected = true;
            this.updateConnectionStatus(true);
            console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!');
        });
        
        this.socket.on('disconnect', () => {
            this.isConnected = false;
            this.updateConnectionStatus(false);
            console.log('‚ùå M·∫•t k·∫øt n·ªëi!');
        });
        
        this.socket.on('new_transaction', (data) => {
            this.handleNewTransaction(data);
        });
    }
    
    setupEventListeners() {
        // Toggle sound
        document.getElementById('toggleSound').addEventListener('click', () => {
            this.soundEnabled = !this.soundEnabled;
            this.updateSoundButton();
        });
        
        // Toggle TTS
        document.getElementById('toggleTTS').addEventListener('click', () => {
            this.ttsEnabled = !this.ttsEnabled;
            this.updateTTSButton();
        });
        
        // Test notification
        document.getElementById('testNotification').addEventListener('click', () => {
            this.sendTestNotification();
        });
        
        // Prevent app from sleeping
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                console.log('üì± App chuy·ªÉn sang background');
            } else {
                console.log('üì± App tr·ªü l·∫°i foreground');
            }
        });
    }
    
    handleNewTransaction(data) {
        console.log('üîî Giao d·ªãch m·ªõi:', data);
        
        // Add to transactions list
        this.transactions.unshift(data);
        if (this.transactions.length > 50) {
            this.transactions = this.transactions.slice(0, 50);
        }
        
        // Update stats
        if (data.type === 'credit') {
            this.totalAmount += data.amount;
        }
        
        // Update UI
        this.updateTransactionsList();
        this.updateStats();
        
        // Show popup notification
        this.showNotificationPopup(data);
        
        // Play sound
        if (this.soundEnabled) {
            this.playNotificationSound();
        }
        
        // Text-to-speech v·ªõi √¢m thanh t√πy ch·ªânh
        if (this.ttsEnabled) {
            this.speakCustomNotification(data);
        }
        
        // Show system notification
        this.showSystemNotification(data);
        
        // Vibrate (if supported)
        if (navigator.vibrate) {
            navigator.vibrate([200, 100, 200]);
        }
    }
    
    updateConnectionStatus(isConnected) {
        const statusElement = document.getElementById('connectionStatus');
        const dot = statusElement.querySelector('.status-dot');
        const text = statusElement.querySelector('span:last-child');
        
        if (isConnected) {
            dot.className = 'status-dot online';
            text.textContent = 'ƒê√£ k·∫øt n·ªëi';
        } else {
            dot.className = 'status-dot offline';
            text.textContent = 'M·∫•t k·∫øt n·ªëi';
        }
    }
    
    updateTransactionsList() {
        const container = document.getElementById('transactionsList');
        
        if (this.transactions.length === 0) {
            container.innerHTML = '<div class="no-transactions">Ch∆∞a c√≥ giao d·ªãch n√†o...</div>';
            return;
        }
        
        container.innerHTML = this.transactions.map(transaction => `
            <div class="transaction-item ${transaction.type}">
                <div class="transaction-header">
                    <div class="transaction-amount ${transaction.type}">
                        ${transaction.type === 'credit' ? '+' : '-'}${this.formatMoney(transaction.amount)}
                    </div>
                    <div class="transaction-time">
                        ${this.formatTime(transaction.timestamp)}
                    </div>
                </div>
                <div class="transaction-content">
                    ${transaction.content}
                </div>
                <div class="transaction-details">
                    ${this.getBankDisplayName(transaction.bank_brand)} ‚Ä¢ ${transaction.account_number}
                </div>
            </div>
        `).join('');
    }
    
    updateStats() {
        document.getElementById('totalTransactions').textContent = this.transactions.length;
        document.getElementById('totalAmount').textContent = this.formatMoney(this.totalAmount);
    }
    
    showNotificationPopup(data) {
        const popup = document.getElementById('notificationPopup');
        const amount = popup.querySelector('.notification-amount');
        const desc = popup.querySelector('.notification-desc');
        
        amount.textContent = `+${this.formatMoney(data.amount)}`;
        desc.textContent = data.content;
        
        popup.classList.remove('hidden');
        
        setTimeout(() => {
            popup.classList.add('hidden');
        }, 4000);
    }
    
    playNotificationSound() {
        // T·∫°o √¢m thanh "TING TING" ƒë·∫∑c tr∆∞ng
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        // √Çm ƒë·∫ßu ti√™n - TING
        const oscillator1 = audioContext.createOscillator();
        const gainNode1 = audioContext.createGain();
        oscillator1.connect(gainNode1);
        gainNode1.connect(audioContext.destination);
        
        oscillator1.frequency.setValueAtTime(800, audioContext.currentTime);
        gainNode1.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode1.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
        
        oscillator1.start(audioContext.currentTime);
        oscillator1.stop(audioContext.currentTime + 0.2);
        
        // √Çm th·ª© hai - TING (sau 0.1 gi√¢y)
        setTimeout(() => {
            const oscillator2 = audioContext.createOscillator();
            const gainNode2 = audioContext.createGain();
            oscillator2.connect(gainNode2);
            gainNode2.connect(audioContext.destination);
            
            oscillator2.frequency.setValueAtTime(900, audioContext.currentTime);
            gainNode2.gain.setValueAtTime(0.3, audioContext.currentTime);
            gainNode2.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
            
            oscillator2.start(audioContext.currentTime);
            oscillator2.stop(audioContext.currentTime + 0.2);
        }, 100);
    }
    
    // H√†m l·∫•y t√™n ph√°t √¢m ng√¢n h√†ng
    getBankPronunciation(bankCode) {
        const pronunciation = this.bankPronunciations[bankCode] || 
                            this.bankPronunciations[bankCode?.toUpperCase()] ||
                            bankCode?.toLowerCase().replace(/bank/gi, 'bƒÉng') || 
                            'ng√¢n h√†ng';
        return pronunciation;
    }
    
    // H√†m l·∫•y t√™n hi·ªÉn th·ªã ng√¢n h√†ng
    getBankDisplayName(bankCode) {
        return bankCode || 'Unknown';
    }
    
    // H√†m ph√°t √¢m t√πy ch·ªânh
    speakCustomNotification(data) {
        if (!window.speechSynthesis) {
            console.log('‚ùå Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ text-to-speech');
            return;
        }
        
        // T·∫°o c√¢u ph√°t √¢m t√πy ch·ªânh
        const bankName = this.getBankPronunciation(data.bank_brand);
        const amount = this.formatMoney(data.amount);
        
        // C√¢u ph√°t √¢m: "Vi·ªát tin bƒÉng nh·∫≠n ƒë∆∞·ª£c [s·ªë ti·ªÅn] ƒë·ªìng, C√°m ∆°n qu√Ω Kh√°ch"
        const customText = `${bankName} nh·∫≠n ƒë∆∞·ª£c ${amount} ƒë·ªìng. C√°m ∆°n qu√Ω Kh√°ch.`;
        
        console.log('üó£Ô∏è Ph√°t √¢m:', customText);
        
        const utterance = new SpeechSynthesisUtterance(customText);
        
        // C·∫•u h√¨nh gi·ªçng n√≥i
        utterance.lang = 'vi-VN';
        utterance.rate = 0.8;  // Ch·∫≠m h∆°n m·ªôt ch√∫t ƒë·ªÉ r√µ r√†ng
        utterance.pitch = 1.1; // Cao h∆°n m·ªôt ch√∫t
        utterance.volume = 0.9;
        
        // Th·ª≠ t√¨m gi·ªçng ti·∫øng Vi·ªát
        const voices = window.speechSynthesis.getVoices();
        const vietnameseVoice = voices.find(voice => 
            voice.lang.includes('vi') || 
            voice.name.toLowerCase().includes('vietnam') ||
            voice.name.toLowerCase().includes('vietnamese')
        );
        
        if (vietnameseVoice) {
            utterance.voice = vietnameseVoice;
            console.log('‚úÖ S·ª≠ d·ª•ng gi·ªçng ti·∫øng Vi·ªát:', vietnameseVoice.name);
        } else {
            console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gi·ªçng ti·∫øng Vi·ªát, s·ª≠ d·ª•ng gi·ªçng m·∫∑c ƒë·ªãnh');
        }
        
        // X·ª≠ l√Ω l·ªói
        utterance.onerror = (event) => {
            console.error('‚ùå L·ªói text-to-speech:', event.error);
        };
        
        utterance.onend = () => {
            console.log('‚úÖ Ho√†n th√†nh ph√°t √¢m');
        };
        
        // Ph√°t √¢m
        window.speechSynthesis.speak(utterance);
    }
    
    async requestNotificationPermission() {
        if (!('Notification' in window)) return;
        
        if (Notification.permission === 'default') {
            await Notification.requestPermission();
        }
    }
    
    showSystemNotification(data) {
        if (!('Notification' in window) || Notification.permission !== 'granted') return;
        
        const bankName = this.getBankDisplayName(data.bank_brand);
        
        const notification = new Notification('BANK-TING-TING üîî', {
            body: `${bankName} nh·∫≠n ƒë∆∞·ª£c +${this.formatMoney(data.amount)}ƒë\n${data.content}`,
            icon: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y=".9em" font-size="90">üí∞</text></svg>',
            badge: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y=".9em" font-size="90">üîî</text></svg>',
            tag: 'bank-transaction',
            requireInteraction: false,
            silent: false
        });
        
        notification.onclick = () => {
            window.focus();
            notification.close();
        };
        
        setTimeout(() => notification.close(), 8000);
    }
    
    updateSoundButton() {
        const btn = document.getElementById('toggleSound');
        btn.textContent = this.soundEnabled ? 'üîä T·∫Øt √¢m thanh' : 'üîá B·∫≠t √¢m thanh';
        btn.className = this.soundEnabled ? 'btn btn-primary' : 'btn btn-secondary';
    }
    
    updateTTSButton() {
        const btn = document.getElementById('toggleTTS');
        btn.textContent = this.ttsEnabled ? 'üó£Ô∏è T·∫Øt gi·ªçng n√≥i' : 'üîá B·∫≠t gi·ªçng n√≥i';
        btn.className = this.ttsEnabled ? 'btn btn-primary' : 'btn btn-secondary';
    }
    
    async sendTestNotification() {
        try {
            const response = await fetch('/test-notification', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            if (response.ok) {
                console.log('‚úÖ ƒê√£ g·ª≠i test notification');
            }
        } catch (error) {
            console.error('‚ùå L·ªói g·ª≠i test notification:', error);
        }
    }
    
    preventSleep() {
        // Gi·ªØ m√†n h√¨nh s√°ng b·∫±ng c√°ch request wake lock
        if ('wakeLock' in navigator) {
            navigator.wakeLock.request('screen').then(wakeLock => {
                console.log('üîí Screen wake lock active');
                
                document.addEventListener('visibilitychange', () => {
                    if (document.visibilityState === 'visible') {
                        navigator.wakeLock.request('screen');
                    }
                });
            }).catch(err => {
                console.log('‚ùå Wake lock error:', err);
            });
        }
        
        // Fallback: t·∫°o audio im l·∫∑ng ƒë·ªÉ gi·ªØ app ho·∫°t ƒë·ªông
        setInterval(() => {
            if (document.hidden) {
                const audio = new Audio('data:audio/wav;base64,UklGRigAAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQAAAAA=');
                audio.play().catch(() => {});
            }
        }, 30000);
    }
    
    formatMoney(amount) {
        return new Intl.NumberFormat('vi-VN').format(amount);
    }
    
    formatTime(timestamp) {
        return new Date(timestamp).toLocaleTimeString('vi-VN', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    }
}

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng khi DOM ƒë√£ s·∫µn s√†ng
document.addEventListener('DOMContentLoaded', () => {
    window.bankTingTing = new BankTingTing();
    
    // Load voices khi c√≥ s·∫µn
    if (window.speechSynthesis) {
        window.speechSynthesis.onvoiceschanged = () => {
            const voices = window.speechSynthesis.getVoices();
            console.log('üó£Ô∏è Danh s√°ch gi·ªçng n√≥i c√≥ s·∫µn:', voices.map(v => `${v.name} (${v.lang})`));
        };
    }
});

// Service Worker cho PWA
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
            .then(registration => console.log('‚úÖ SW registered'))
            .catch(error => console.log('‚ùå SW registration failed'));
    });
}